<?xml version="1.0" encoding="UTF-8"?>

<!--
   Copyright (c) 2009, 2019 Mountainminds GmbH & Co. KG and Contributors
   This program and the accompanying materials are made available under
   the terms of the Eclipse Public License 2.0 which is available at
   http://www.eclipse.org/legal/epl-2.0

   SPDX-License-Identifier: EPL-2.0

   Contributors:
      Marc R. Hoffmann - initial API and implementation
-->

<project name="Example Ant Build with JaCoCo" default="all" xmlns:jacoco="antlib:org.jacoco.ant"
        basedir="/home/dks/git/McCabe_v1/McCabe">

	<description>
	  Example Ant build file that demonstrates how a JaCoCo coverage report
	  can be itegrated into an existing build in three simple steps.
	</description>

	<property name="src.dir" location="src" />
        <property name="lib.getopt.dir" location="lib/getopt" />
        <property name="lib.hamcrest.dir" location="lib/hamcrest" />
        <property name="lib.junit.dir" location="lib/junit" />
	<!-- Need for pmd -->
    <property name="build.dir" value="build" />
	<property name="result.dir" location="build/coverage" />
    <property name="checkstyle.dir" location="lib/checkstyle" />
	<property name="result.classes.dir" location="${result.dir}/classes" />
	<property name="result.report.dir" location="${result.dir}/site/jacoco" />
	<property name="result.exec.file" location="${result.dir}/jacoco.exec" />

	<!-- Step 1: Import JaCoCo Ant tasks -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="../../../lib/jacocoant.jar" />
	</taskdef>

    <path id="dependency.path">
    		<fileset dir="${lib.getopt.dir}" includes="*.jar" />
    		<fileset dir="${lib.hamcrest.dir}" includes="*.jar" />
    		<fileset dir="${lib.junit.dir}" includes="*.jar" />
	</path>

    <path id="checkstyle.classpath">
	<fileset dir="${checkstyle.dir}">
	        <include name="ivy*.jar" />
	        <include name="*.jar" />
	</fileset>
    </path>
	
    <path id="pmd.classpath">
    	<pathelement location="${basedir}/build"/>
    		<fileset dir="/opt/pmd-bin-6.6.0/lib/">
	        <include name="*.jar"/>
    	</fileset>
    </path>

	<target name="clean">
		<delete dir="${result.dir}" />
	</target>

	<target name="compile">
		<mkdir dir="${result.classes.dir}" />

		<javac srcdir="${src.dir}" destdir="${result.classes.dir}" classpathref="dependency.path" debug="true" includeantruntime="false">
                     <include name="**/*.java"/>
                     <!-- <exclude name="**/*Test.java"/> -->
                </javac>

	</target>

	<target name="compileTest" depends="compile" description="compile jUnit Test cases ">
    		<javac srcdir="${test-dir}" destdir="${bin}" includeantruntime="true" nowarn="yes" debug="true" />
	</target>

	<target name="test" depends="compile">
		<!-- Step 2: Wrap test execution with the JaCoCo coverage task -->
		<jacoco:coverage destfile="${result.exec.file}">

   			<junit printsummary="yes" haltonfailure="no" fork="true">
				<classpath refid="dependency.path" />
				<classpath location="${result.classes.dir}" />

			        <test name="test.AllTests"/>

				<formatter type="xml" />
				<formatter type="plain" />
				<formatter type="brief" />
			</junit>
		</jacoco:coverage>
	</target>

	<target name="report" depends="test">
		<!-- Step 3: Create coverage report -->
		<jacoco:report>

			<!-- This task needs the collected execution data and ... -->
			<executiondata>
				<file file="${result.exec.file}" />
			</executiondata>

			<!-- the class files and optional source files ... -->
			<structure name="McCabe project">
				<classfiles>
					<fileset dir="${result.classes.dir}">
                                                <include name="main/**/*.class" /> <!-- main is the src/main for the source code -->
                                        	<exclude name="**/*Test.class" />
                                        </fileset>
				</classfiles>

                		<sourcefiles encoding="UTF-8">
                  			<fileset dir="${src.dir}" >
                                                <include name="main/**/*.java" />
                    			</fileset>  
                		</sourcefiles>
			</structure>

			<!-- to produce reports in different formats. -->
			<html destdir="${result.report.dir}" />
			<csv destfile="${result.report.dir}/report.csv" />
			<xml destfile="${result.report.dir}/report.xml" />
		</jacoco:report>
	</target>


    <property name="ivy.install.version" value="2.1.0-rc2" />
    <!-- You may place ivy.jar into other folder if you want to keep folder lib clean-->
    <property name="ivy.jar.dir" value="lib/checkstyle" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
      <!-- try to load ivy here from ivy home, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as local lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>

        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <target name="resolve" description="retrieve dependencies with ivy" depends="init-ivy" xmlns:ivy="antlib:org.apache.ivy.ant">
	    	<ivy:settings file="build/ant/checkstyle/ivysettings.xml" />
	        <ivy:retrieve />    	
	</target>

	<target name="init-checkstyle" depends="resolve">
		<path id="checkstyle.lib.path">
	            <fileset dir="lib" includes="*.jar"/>
		</path>
		<!-- Sevntu custom checks are retrieved by Ivy into lib folder and will be accessible to checkstyle-->
	</target>

	<target name="checkstyle"
	        description="Generates a report of code convention violations."
		depends="init-checkstyle">
	  <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpathref="checkstyle.lib.path"/>
	  <!-- See http://checkstyle.sourceforge.net/anttask.html for full options of using checkstyle with ant-->
	  <checkstyle config="checkstyle/google_checks.xml"
	              failureProperty="checkstyle.failure"
	              failOnViolation="false">
	    <formatter type="xml" tofile="logs/checkstyle/checkstyle_report.xml"/>
	    <fileset dir="src/main/java" includes="**/*.java"/>
	  </checkstyle>
	   <xslt in="logs/checkstyle/checkstyle_report.xml"
	          out="logs/checkstyle/checkstyle_report.html"
	          style="build/ant/checkstyle/checkstyle-noframes-severity-sorted.xsl"/>
	</target>

    <target name="pmd">
    	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="pmd.classpath"/>

        <pmd rulesetfiles="../pmd/ruleset.xml" shortFileNames="true">
              <sourceLanguage name="java" version="1.8" />
              <formatter type="net.sourceforge.pmd.renderers.HTMLRenderer" toFile="${basedir}/logs/pmd/index.html"/>
              <fileset dir="${basedir}/src">
                  <include name="**/*.java"/>
               	  <exclude name="test/**/*.java"/>
              </fileset>
        </pmd>
	</target>
	
    <target name="cpd">
        <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="pmd.classpath"/>
        <cpd minimumTokenCount="100" outputFile="${basedir}/logs/cpd/cpd.txt">
           <fileset dir="${basedir}/src">
              <include name="**/*.java"/>
           	  <exclude name="test/**/*.java" />
           </fileset>
        </cpd>
    </target>
	
	<target name="javadoc" description="Create the javadoc file for this source code.">
	    <javadoc
	    	destdir="${basedir}/logs/javadoc"
	        author="true"
	        version="true"
	        use="true"
	        windowtitle="Application API">
	           
	    	<classpath location="${lib.getopt.dir}/java-getopt-1.0.14.jar" />
	            
	        <fileset dir="src/main/java" defaultexcludes="yes">
	                <include name="**"/>
	        </fileset>

	        <doctitle><![CDATA[<h1>Application</h1>]]></doctitle>
	        <bottom><![CDATA[<i>Copyright &#169; 2016 DKS All Rights Reserved.</i>]]></bottom>
<!--	        <tag name="todo" scope="all" description="To do:"/> -->
	        <link offline="true" href="http://docs.oracle.com/javase/8/docs/api/" packagelistLoc="/tmp"/>
	        <link href="http://docs.oracle.com/javase/8/docs/api/"/>
	    </javadoc>
    </target>
	
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>
	<property name="findbugs.home" value="/opt/findbugs-3.0.1" />

	<target name="jar" description="JARs the project source files">
	        <delete file="McCabe.jar" failonerror="false" />
	        <jar destfile="McCabe.jar" basedir="bin">
	           <zipgroupfileset dir="${lib.getopt.dir}" includes="*.jar" />
	           <manifest>
	                <attribute name="Main-Class"
	                    value="main.java.main.Main"/>
	           </manifest>
	        </jar>
	</target>
	
	<target name="findbugs" depends="jar">
	    <findbugs home="${findbugs.home}"
	    	      reportLevel="high"
	              output="html"
	              outputFile="${basedir}/logs/findbugs/findbugs.html" >
	    	<auxClasspath
	              path="${basedir}/lib/**/*.jar"
		    />
	    	<sourcePath path="${basedir}/src/application/**/*.java" />
	      <class location="${basedir}/McCabe.jar" />
	    </findbugs>
	</target>

	<target name="rebuild" depends="clean,compile,test,report" />
    	
	<!-- target "findbugs" depends on the "jar" target -->
    <target name="all" description="Create all the targets for the application." 
		      depends="rebuild, javadoc, checkstyle, pmd, cpd, findbugs" > 
    </target>

</project>
